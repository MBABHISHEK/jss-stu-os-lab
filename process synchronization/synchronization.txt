
 1.procducer consumer problem and reader writer problem using semaphores,pthreads.

 * The pthread_mutex_init() function shall initialize the mutex referenced by mutex with attributes specified by attr.  
 * If attr is NULL, the default mutex attributes are used
 * Prototype: int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);
 * The mutex object referenced by mutex shall be locked by a call to pthread_mutex_lock().
 * Prototype: int pthread_mutex_lock(pthread_mutex_t *mutex);
 * The pthread_mutex_unlock() function shall release the mutex object referenced by mutex.
 * Prototype: int pthread_mutex_unlock(pthread_mutex_t *mutex);
 * The pthread_mutex_destroy() function shall destroy the mutex object referenced by mutex.
 * Prototype:  int pthread_mutex_destroy(pthread_mutex_t *mutex);
 * The pthread_create() function starts a new thread in the calling process.
 * Prototype: int pthread_create(pthread_t *restrict thread, const pthread_attr_t *restrict attr, void *(*start_routine)(void *),
   void *restrict arg);
 * The pthread_join() function waits for the thread specified by thread to terminate.
 * Prototype: int pthread_join(pthread_t thread, void **retval);
 * The sem_init() function initializes the unnamed semaphore at the address pointed to by sem.
 * Prototype: int sem_init(sem_t *sem, int pshared, unsigned int value);
 * The sem_wait() function decrements (locks) the semaphore pointed to by sem.
 * Prototype: int sem_wait(sem_t *sem);
 * The sem_post() function increments (unlocks) the semaphore pointed to by sem.
 * Prototype: int sem_post(sem_t *sem);
 * The sem_destroy() function destroys the unnamed semaphore at the address pointed to by sem.
 * Prototype: int sem_destroy(sem_t *sem);


